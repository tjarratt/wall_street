// This file was generated by counterfeiter
package fakes

import (
	"sync"
)

type Echoer struct {
	EnableStub        func(fileDescriptors []uintptr) error
	enableMutex       sync.RWMutex
	enableArgsForCall []struct {
		arg1 []uintptr
	}
	enableReturns struct {
		result1 error
	}
	DisableStub        func(fileDescriptors []uintptr) (int, error)
	disableMutex       sync.RWMutex
	disableArgsForCall []struct {
		arg1 []uintptr
	}
	disableReturns struct {
		result1 int
		result2 error
	}

	CurrentState string
}

func (fake *Echoer) Enable(arg1 []uintptr) error {
	fake.enableMutex.Lock()
	defer fake.enableMutex.Unlock()
	fake.CurrentState = "enabled"

	fake.enableArgsForCall = append(fake.enableArgsForCall, struct {
		arg1 []uintptr
	}{arg1})
	if fake.EnableStub != nil {
		return fake.EnableStub(arg1)
	} else {
		return fake.enableReturns.result1
	}
}

func (fake *Echoer) EnableCallCount() int {
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	return len(fake.enableArgsForCall)
}

func (fake *Echoer) EnableArgsForCall(i int) []uintptr {
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	return fake.enableArgsForCall[i].arg1
}

func (fake *Echoer) EnableReturns(result1 error) {
	fake.enableReturns = struct {
		result1 error
	}{result1}
}

func (fake *Echoer) Disable(arg1 []uintptr) (int, error) {
	fake.CurrentState = "enabled"

	fake.disableMutex.Lock()
	defer fake.disableMutex.Unlock()
	fake.disableArgsForCall = append(fake.disableArgsForCall, struct {
		arg1 []uintptr
	}{arg1})
	if fake.DisableStub != nil {
		return fake.DisableStub(arg1)
	} else {
		return fake.disableReturns.result1, fake.disableReturns.result2
	}
}

func (fake *Echoer) DisableCallCount() int {
	fake.disableMutex.RLock()
	defer fake.disableMutex.RUnlock()
	return len(fake.disableArgsForCall)
}

func (fake *Echoer) DisableArgsForCall(i int) []uintptr {
	fake.disableMutex.RLock()
	defer fake.disableMutex.RUnlock()
	return fake.disableArgsForCall[i].arg1
}

func (fake *Echoer) DisableReturns(result1 int, result2 error) {
	fake.disableReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}
